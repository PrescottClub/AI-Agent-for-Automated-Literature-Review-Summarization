---
description:
globs:
alwaysApply: false
---
# AI Agent for Automated Literature Review & Summarization - Project Guidelines

This document outlines the development guidelines, key files, and best practices for the AI Agent for Automated Literature Review & Summarization project.

## 1. Project Overview

The project aims to build an AI Agent to automate the retrieval, processing, and summarization of domain-specific research papers. It extracts key insights and identifies emerging trends from large volumes of textual data.

**GitHub Repository:** [https://github.com/PrescottClub/AI-Agent-for-Automated-Literature-Review-Summarization.git](https://github.com/PrescottClub/AI-Agent-for-Automated-Literature-Review-Summarization.git)

## 2. Core Technologies

- **Programming Language:** Python
- **Core Framework:** LangChain
- **Language Models:** OpenAI API (or similar LLMs)
- **Embeddings:** PyTorch (e.g., Sentence-Transformers) or LLM provider's embedding APIs
- **Vector Databases:** FAISS or Chroma
- **Data Handling:** Pandas
- **NLP Utilities:** NLTK/spaCy

## 3. Key Files

- **README:** The main project documentation, including overview, setup, and usage instructions. Refer to [README.md](mdc:README.md).
- **Git Ignore:** Specifies intentionally untracked files that Git should ignore. Refer to [.gitignore](mdc:.gitignore).
- **Requirements:** Project dependencies will be managed (e.g., via `requirements.txt` or `pyproject.toml` with Poetry/PDM).
- **Configuration:** API keys and other configurations should be managed via environment variables (e.g., using a `.env` file, which is included in [.gitignore](mdc:.gitignore)).

## 4. Development Workflow & Best Practices

### 4.1. Version Control (Git & GitHub)
- **Main Branch:** `main` (stable and deployable).
- **Feature Branches:** Create branches for new features (e.g., `feature/your-feature-name`).
- **Fix Branches:** Create branches for bug fixes (e.g., `fix/your-bug-fix`).
- **Pull Requests (PRs):** Merge changes to `main` via PRs, requiring review if possible.
- **Commit Messages:** Follow the [Conventional Commits](https://www.conventionalcommits.org/) specification.
  - Example: `feat: Implement literature retrieval module`
  - Example: `fix: Resolve parsing error for specific PDF formats`

### 4.2. Code Style & Quality
- **PEP 8:** Adhere to the PEP 8 style guide for Python code.
- **Code Formatter:** Use `Black` for consistent code formatting.
- **Linter:** Use `Flake8` (with plugins like `flake8-bugbear`, `flake8-annotations`, `flake8-docstrings`) for static analysis.
- **Import Sorter:** Use `isort` to organize imports.

### 4.3. Type Hinting
- Utilize Python type hints for all function signatures and variables where appropriate.
- Use `MyPy` for static type checking.

### 4.4. Testing
- **Framework:** Use `pytest`.
- **Coverage:** Strive for high unit test coverage for all core logic.
- Run tests before committing and pushing changes.

### 4.5. Dependency Management
- Prefer `Poetry` or `PDM` for managing dependencies and virtual environments (using `pyproject.toml`).
- If using `pip`, maintain a `requirements.txt` file.

### 4.6. Secrets Management
- **NEVER** commit API keys, passwords, or other sensitive credentials directly into the codebase.
- Use environment variables (e.g., loaded from a `.env` file that is listed in [.gitignore](mdc:.gitignore)).

### 4.7. Pre-commit Hooks
- Configure `pre-commit` hooks to automate formatting (Black, isort), linting (Flake8), and type checking (MyPy) before each commit. This helps maintain code quality proactively.
  Example tools for `.pre-commit-config.yaml`:
    - `pre-commit-hooks` (for basic checks like trailing whitespace)
    - `black`
    - `isort`
    - `flake8`
    - `mypy`

### 4.8. Logging
- Use the `logging` module for application logs instead of `print()` statements. Configure appropriate log levels.

### 4.9. Documentation
- Write clear docstrings for all modules, classes, and functions (e.g., Google, NumPy, or reStructuredText style).
- Keep [README.md](mdc:README.md) up-to-date.

## 5. Initial Setup (Recap from README.md)

```bash
# Clone the repository
git clone https://github.com/PrescottClub/AI-Agent-for-Automated-Literature-Review-Summarization.git
cd AI-Agent-for-Automated-Literature-Review-Summarization

# Create and activate a virtual environment (recommended)
python -m venv venv
# On Windows:
# .\venv\Scripts\activate
# On macOS/Linux:
# source venv/bin/activate

# Install dependencies (example, adapt as per chosen dependency manager)
# pip install -r requirements.txt
# poetry install
```

This rule provides a quick reference for anyone working on the project.
