name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-asyncio redis
    
    - name: Install spaCy model
      run: |
        python -m spacy download en_core_web_sm
    
    - name: Create test directories
      run: |
        mkdir -p data/chroma_db
        mkdir -p logs
        mkdir -p data/outputs
    
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379
        LLM_PROVIDER: mock
        DEEPSEEK_API_KEY: test-key
        OPENAI_API_KEY: test-key
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/literature-review-frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend/literature-review-frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend/literature-review-frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend/literature-review-frontend
        npm run test:unit
    
    - name: Build frontend
      run: |
        cd frontend/literature-review-frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  build-and-deploy:
    needs: [test, frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t literature-review-agent:${{ github.sha }} .
        docker build -t literature-review-agent:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 literature-review-agent:latest
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      run: |
        echo "部署到测试环境"
        # 这里可以添加实际的部署脚本
